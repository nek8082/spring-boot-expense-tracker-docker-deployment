services:
  postgres:
    image: postgres:14
    container_name: postgres
    environment:
      POSTGRES_USER: ${SPRING_DATASOURCE_USERNAME}
      POSTGRES_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      POSTGRES_DB: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres-init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - backend

  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    command: ["start", "--import-realm"]
    environment:
      # https://www.keycloak.org/server/all-config
      KC_DB: postgres
      KC_DB_URL: jdbc:postgresql://postgres/postgres?currentSchema=keycloak
      KC_DB_USERNAME: ${SPRING_DATASOURCE_USERNAME}
      KC_DB_PASSWORD: ${SPRING_DATASOURCE_PASSWORD}
      KEYCLOAK_ADMIN: ${KEYCLOAK_ADMIN_USERNAME}
      KEYCLOAK_ADMIN_PASSWORD: ${KEYCLOAK_ADMIN_PASSWORD}
      KC_PROXY_HEADERS: xforwarded
      KC_HOSTNAME: ${KEYCLOAK_HOSTNAME}
      KC_HOSTNAME_ADMIN: ${KEYCLOAK_HOSTNAME_ADMIN}
      KC_HTTP_RELATIVE_PATH: /keycloak
      KC_HOSTNAME_STRICT: false
      KC_HTTP_ENABLED: true
      KC_HOSTNAME_BACKCHANNEL_DYNAMIC: ${KEYCLOAK_HOSTNAME_BACKCHANNEL_DYNAMIC}
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      - backend
    healthcheck:
      test:
        [
          "CMD-SHELL",
          'exec 3<>/dev/tcp/${KEYCLOAK_HOST}/${KEYCLOAK_PORT}; echo -e "GET /health/ready HTTP/1.1\nhost: ${KEYCLOAK_HOST}:${KEYCLOAK_PORT}\n" >&3; timeout --preserve-status 1 cat <&3 | grep -m 1 status | grep -m 1 UP; ERROR=$?; exec 3<&-; exec 3>&-; exit $ERROR'
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./realms:/opt/keycloak/data/import

  spring-service:
    image: cash-kontrolleur:$IMAGE_VERSION # Make sure this image exists locally by building it in the spring-service repo
    container_name: spring-service
    env_file:
      - .env # Use .env.example from the spring-service repo as a template
    expose:
      - "8081"
    depends_on:
      keycloak:
        condition: service_healthy
      postgres:
        condition: service_started
    networks:
      - backend
    extra_hosts:
      - "${PROXY_HOST}:host-gateway"

  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
      - ${PATH_TO_SSL_CERT}:/etc/nginx/nginx.crt
      - ${PATH_TO_SSL_KEY}:/etc/nginx/nginx.key
    ports:
      - "443:443"
    depends_on:
      spring-service:
        condition: service_started
      keycloak:
        condition: service_healthy
    networks:
      - backend

volumes:
  postgres-data:

networks:
  backend:
